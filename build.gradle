import java.util.regex.Pattern

plugins {
    id 'java'
    id 'idea'

    id 'io.freefair.lombok' version '8.6'
    id 'com.github.ben-manes.versions' version '0.51.0'

    // https://docs.spring.io/spring-boot/docs/current/reference/html/dependency-versions.html
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'

    id "com.vaadin" version "24.4.4"
    id "org.openapi.generator" version '7.6.0'
}
apply from: './gradle/dependencies.gradle'
apply from: './gradle/testing.gradle'

group = theGroup
archivesBaseName = theArchivesBaseName
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
compileJava {
    options.encoding = 'UTF-8'
}
java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}
wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = '8.8'
    doLast {
        delete "$projectDir/gradlew.bat", "$projectDir/gradlew"
    }
}
vaadin {
    nodeAutoUpdate = false
    nodeVersion = 'v20.13.1'
    pnpmEnable = true
    productionMode = true
    forceProductionBuild
}
classes {
    doLast {
        def resourcesDir = sourceSets.main.output.resourcesDir as File
        def releaseVersion = System.env.RELEASE_VERSION as String
        if (releaseVersion) {
            new File(resourcesDir, "version.info").text = releaseVersion
        } else {
            new File(resourcesDir, "version.info").text = version
        }
    }
}
springBoot {
    mainClass = "ru.iopump.qa.allure.Application"
}

tasks.named("bootJar") {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher'
    }
}

//// OPENAPI ////

// https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
// https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators.md
// https://openapi-generator.tech/docs/generators/spring/
openApiGenerate {
    generatorName = "spring"
    library = "spring-boot"

    inputSpec = "$rootDir/src/test/resources/tms/openapi-youtrack.json"
    outputDir = "$projectDir/build/generated"

    apiPackage = "org.brewcode.api.youtrack"
    invokerPackage = "org.brewcode.api.youtrack.invoker"
    modelPackage = "org.brewcode.api.youtrack.model"
    modelNameSuffix = "Dto"

    importMappings = [
        SavedQueryDto: "org.brewcode.api.youtrack.model.SavedQueryDto",
    ]

    configOptions = [
        useBeanValidation                   : "false",
        useJakartaEe                        : "true",
        serializationLibrary                : "jackson",
        annotationLibrary                   : "swagger2",
        generatedConstructorWithRequiredArgs: "true",
        dateLibrary                         : "java8",
        useSpringBoot3                      : "true",
        interfaceOnly                       : "true",
        openApiNullable                     : "false",
        useResponseEntity                   : "false", // Не использовать ResponseEntity<Е>, а сразу вернуть Е
        skipDefaultInterface                : "true" // Не добавлять в интерфейс default реализацию
    ]
}

tasks.named("openApiGenerate") {
    doLast {
        def directory = file("build/generated/src/main/java/org/brewcode/api/youtrack/model")
        directory.eachFile {
            def pattern = Pattern.compile('Type\\(value = (.+).class')
            def matcher = pattern.matcher(it.text)
            if (matcher.find())
                it.text = matcher.replaceAll { match -> 'Type(value = org.brewcode.api.youtrack.model.%s.class'.formatted(match.group(1)) }

            if (it.name == 'BaseBundleDto.java') {
                it.text = it.text.readLines().withIndex().findAll { line, index -> index < 72 || index > 98 }.collect { it[0] }.join("\n")
            }
        }
    }
}

compileJava.dependsOn tasks.openApiGenerate
compileTestJava.dependsOn tasks.openApiGenerate
sourceSets.main.java.srcDirs += tasks.openApiGenerate

bootJar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher'
    }
}

wrapper {
    gradleVersion = '8.8'
    distributionType = Wrapper.DistributionType.ALL
}
